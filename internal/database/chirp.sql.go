// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chirp.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const chirpDeleteByID = `-- name: ChirpDeleteByID :exec
DELETE FROM chirps
WHERE id = $1
`

func (q *Queries) ChirpDeleteByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, chirpDeleteByID, id)
	return err
}

const createChirp = `-- name: CreateChirp :one
WITH inserted_chirp AS (
    INSERT INTO chirps (id, created_at, updated_at, body, user_id)
    VALUES (
        gen_random_uuid(),
            NOW(),
            NOW(),
            $1,
            $2
    )
    RETURNING id, created_at, updated_at, body, user_id
)
SELECT
    inserted_chirp.id,
    inserted_chirp.created_at,
    inserted_chirp.updated_at,
    inserted_chirp.body,
    users.email AS email
FROM inserted_chirp
INNER JOIN users ON users.id = inserted_chirp.user_id
`

type CreateChirpParams struct {
	Body   string    `json:"body"`
	UserID uuid.UUID `json:"user_id"`
}

type CreateChirpRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Body      string    `json:"body"`
	Email     string    `json:"email"`
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (CreateChirpRow, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.Body, arg.UserID)
	var i CreateChirpRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.Email,
	)
	return i, err
}

const getAllChirps = `-- name: GetAllChirps :many
SELECT id, created_at, updated_at, body, user_id FROM chirps
ORDER BY created_at ASC
`

func (q *Queries) GetAllChirps(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getAllChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneChirp = `-- name: GetOneChirp :one
SELECT id, created_at, updated_at, body, user_id FROM chirps
WHERE id=$1
`

func (q *Queries) GetOneChirp(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getOneChirp, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}
